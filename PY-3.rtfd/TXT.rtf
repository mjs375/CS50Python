{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\froman\fcharset0 Garamond;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset204 PTSans-Regular;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red1\green31\blue103;\red192\green237\blue254;\red25\green28\blue31;
\red255\green255\blue255;\red0\green0\blue255;\red246\green247\blue249;\red52\green52\blue52;\red19\green142\blue2;
\red228\green231\blue235;\red146\green11\blue36;\red180\green58\blue4;\red251\green0\blue7;}
{\*\expandedcolortbl;;\cssrgb\c0\c18185\c48021;\cssrgb\c79369\c94291\c99728;\cssrgb\c12941\c14510\c16078;
\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c100000;\cssrgb\c97255\c97647\c98039;\cssrgb\c26667\c26667\c26667;\cssrgb\c0\c61176\c0;
\cssrgb\c91373\c92549\c93725;\cssrgb\c64706\c10980\c18824;\cssrgb\c76471\c30588\c0;\cssrgb\c100000\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{box\}}{\leveltext\leveltemplateid1\'01\uc0\u9643 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{box\}}{\leveltext\leveltemplateid101\'01\uc0\u9643 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}}
\margl1440\margr1440\vieww10880\viewh12320\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\fs30 \cf0 \

\b \cf2 CS50: \
WEB PROGRAMMING\
W/ PYTHON & JAVASCRIPT
\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 \cb1 {\listtext	
\f1 \uc0\u9643 
\f0 	}Lecture 2: PYTHON\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	
\f1 \uc0\u9643 
\f0 	}:Search (finish*)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#introduction"}}{\fldrslt 
\f2\b\fs36 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Introduction}}
\f2\b\fs36 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls3\ilvl0
\b0\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 So far, we\'92ve discussed how to build simple web pages using HTML and CSS, and how to use Git and GitHub in order to keep track of changes to our code and collaborate with others.\cb1 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Today, we\'92ll dive into Python, one of the two main programming languages we\'92ll use throughout this course.\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#python"}}{\fldrslt 
\b\fs36 \cf4 Python}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls4\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Python is a very powerful and widely-used language that will allow us to quickly build fairly complicated web applications. In this course, we\'92ll be using Python 3, although Python 2 is still in use in some places. When looking at outside resources, be careful to make sure they\'92re using the same version.\cb1 \uc0\u8232 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Let\'92s start where we start with many programming languages: Hello, world. This program, written in Python, would look like this:\cb1 \uc0\u8232 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Hello, world!"\cf8 \strokec8 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls5\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 To break down what\'92s going on in that line, there is a\'a0
\f3\fs28 \cb10 print
\f2\fs32 \cb5 \'a0
\b function
\b0 \'a0built in to the python language, that takes an\'a0
\b argument
\b0 \'a0in parentheses, and displays that argument on the command line.\cb1 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 To actually write and run this program on your computers, you\'92ll first type this line into your text editor of choice, and then save the file as\'a0
\f3\fs28 \cb10 something.py
\f2\fs32 \cb5 . Next, you\'92ll head over to your terminal, navigate to the directory containing your file, and type\'a0
\f3\fs28 \cb10 python something.py
\f2\fs32 \cb5 . In the case of the above program, the words \'93Hello, world!\'94 will then be displayed in the terminal.\cb1 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Depending on how your computer is set up, you may have to type\'a0
\f3\fs28 \cb10 python3
\f2\fs32 \cb5 \'a0instead of\'a0
\f3\fs28 \cb10 python
\f2\fs32 \cb5 \'a0before the file name, and you may even have to\'a0{\field{\*\fldinst{HYPERLINK "https://www.python.org/downloads/"}}{\fldrslt \cf11 \strokec11 download Python}}\'a0if you haven\'92t already. After installing Python, we recommend that you also\'a0{\field{\*\fldinst{HYPERLINK "https://pip.pypa.io/en/stable/installing/"}}{\fldrslt \cf11 \strokec11 download Pip}}, as you\'92ll need that later in the course.\cb1 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 When you type\'a0
\f3\fs28 \cb10 python file.py
\f2\fs32 \cb5 \'a0in your terminal, a program called an\'a0
\b interpreter
\b0 , which you downloaded together with Python, reads through your file line by line, and executes each line of the code. This is different than languages like\'a0
\b C
\b0 \'a0or\'a0
\b Java
\b0 , which need to be\'a0
\b compiled
\b0 \'a0into machine code before they can be run.\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#variables"}}{\fldrslt 
\b\fs36 \cf4 Variables}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 A key part of any programming language is the ability to create and manipulate variables. In order to assign a value to a variable in Python, the syntax looks like this:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 a = 28\
b = 1.5\
c = \cf9 \strokec9 "Hello!"\cf8 \strokec8 \
d = \cf12 \strokec12 True\cf8 \strokec8 \
e = \cf12 \strokec12 None\cf8 \strokec8 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Each of these lines is taking the value to the right of the\'a0
\f3\fs28 \cb10 =
\f2\fs32 \cb5 , and storing it in the variable name to the left.\
Unlike in some other programming languages, Python variable types are inferred, meaning that while \ul each variable does have a type, we do not have to explicitly state\ulnone  which type it is when we create the variable. Some of the most common variable types are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls6\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 int
\b0 : An integer |128\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 float
\b0 : A decimal number |1.5\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 chr
\b0 : A single character |h\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 str
\b0 : A string, or sequence of characters |hello\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 bool
\b0 : A value that is either\'a0
\f3\fs28 \cb10 True
\f2\fs32 \cb5 \'a0or\'a0
\f3\fs28 \cb10 False |True/False [capitalized]
\f2\fs32 \cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 NoneType
\b0 : A special value (
\f3\fs28 \cb10 None
\f2\fs32 \cb5 ) indicating the absence of a value.\cb1 \
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 Now, we\'92ll work on writing a more interesting program that can take input from the user and say hello to that user. To do this, we\'92ll use another built in function called\'a0
\f3\fs28 \cb10 input
\f2\fs32 \cb5 \'a0which displays a prompt to the user, and returns whatever the user provides as input. For example, we can write the following in a file called\'a0
\f3\fs28 \cb10 name.py
\f2\fs32 \cb5 :\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 name = \cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "Name: "\cf8 \strokec8 )\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Hello, "\cf8 \strokec8  + name)\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\
When run on the terminal, this is what the program looks like:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
A couple of things to point out here:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls7\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 In the first line, instead of assigning the variable name to an explicit value, we\'92re assigning it to whatever the\'a0
\f3\fs28 \cb10 input
\f2\fs32 \cb5 \'a0function returns.\cb1 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 In the second line, we\'92re using the\'a0
\f3\fs28 \cb10 +
\f2\fs32 \cb5 \'a0operator to combine, or\'a0
\b concatenate
\b0 , two strings. In python, the\'a0
\f3\fs28 \cb10 +
\f2\fs32 \cb5 \'a0operator can be used to add numbers or concatenate strings and lists.\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#formatting-strings"}}{\fldrslt 
\b\fs36 \cf4 Formatting Strings}}
\b\fs36 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls8\ilvl0
\b0\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 While we can use the\'a0
\f3\fs28 \cb10 +
\f2\fs32 \cb5 \'a0operator to combine strings as we did above, in the latest versions of python, there are even easier ways to work with strings, known as\'a0{\field{\*\fldinst{HYPERLINK "https://realpython.com/python-f-strings/"}}{\fldrslt \cf11 \strokec11 formatted strings}}, or\'a0
\b f-strings
\b0 \'a0for short.\cb1 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 To indicate that we\'92re using formatted strings, we simply add an\'a0
\f3\fs28 \cb10 f
\f2\fs32 \cb5 \'a0before the quotation marks. For example, instead of using\'a0
\f3\fs28 \cb10 "Hello, " + name
\f2\fs32 \cb5 \'a0as we did above, we could write\'a0
\f3\fs28 \cb10 f"Hello, \{name\}"
\f2\fs32 \cb5 \'a0for the same result. We can even plug a function into this string if we want, and turn our program above into the single line:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"Hello,\'a0\{\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "Name: "\cf8 \strokec8 )\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#conditions"}}{\fldrslt 
\b\fs36 \cf4 Conditions}}
\b\fs36 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls9\ilvl0
\b0\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Just like in other programming languages, Python gives us the ability to run different segments of code based on different\'a0{\field{\*\fldinst{HYPERLINK "https://realpython.com/python-conditional-statements/"}}{\fldrslt \cf11 \strokec11 conditions}}. For example, in the program below, we\'92ll change our output depending on the number a user types in:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 num = \cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "Number: "\cf8 \strokec8 )\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 if\cf8 \strokec8  num > 0:\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Number is positive"\cf8 \strokec8 )\
\cf6 \strokec6 elif\cf8 \strokec8  num < 0:\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Number is negative"\cf8 \strokec8 )\
\cf6 \strokec6 else\cf8 \strokec8 :\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Number is 0"\cf8 \strokec8 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls10\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Getting into how the above program works, conditionals in python contain a keyword (
\f3\fs28 \cb10 if
\f2\fs32 \cb5 ,\'a0
\f3\fs28 \cb10 elif
\f2\fs32 \cb5 , or\'a0
\f3\fs28 \cb10 else
\f2\fs32 \cb5 ) and then (except in the\'a0
\f3\fs28 \cb10 else
\f2\fs32 \cb5 \'a0case) a boolean expression, or an expression that evaluates to either\'a0
\f3\fs28 \cb10 True
\f2\fs32 \cb5 \'a0or\'a0
\f3\fs28 \cb10 False
\f2\fs32 \cb5 . Then, all of the code we want to run if a certain expression is true is\'a0
\b indented
\b0 \'a0directly below the statement. Indentation is required as part of the Python syntax.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 However, when we run this program, we run into an\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/tutorial/errors.html"}}{\fldrslt \cf11 \strokec11 exception}}\'a0that looks like this:\cb1 \
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls11\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 An exception is what happens when an error occurs while we\'92re running our python code, and over time you\'92ll get better and better at interpreting these errors, which is a very valuable skill to have.\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Let\'92s look a bit more closely at this specific exception: If we look at the bottom, we\'92ll see that we ran into a\'a0
\f3\fs28 \cb10 TypeError
\f2\fs32 \cb5 , which generally means Python expected a certain variable to be of one type, but found it to be of another type. In this case, the exception tells us that we cannot use the\'a0
\f3\fs28 \cb10 >
\f2\fs32 \cb5 \'a0symbol to compare a\'a0
\f3\fs28 \cb10 str
\f2\fs32 \cb5 \'a0and\'a0
\f3\fs28 \cb10 int
\f2\fs32 \cb5 , and then above we can see that this comparison occurs in line 2.\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 In this case, it\'92s obvious that\'a0
\f3\fs28 \cb10 0
\f2\fs32 \cb5 \'a0is an integer, so it must be the case that our\'a0
\f3\fs28 \cb10 num
\f2\fs32 \cb5 \'a0variable is a string. This is happening because it turns out that the\'a0
\f3\fs28 \cb10 input
\f2\fs32 \cb5 \'a0function always returns a string, and we have to specify that it should be turned into (or\'a0
\b cast
\b0 \'a0into) an integer using the\'a0
\f3\fs28 \cb10 int
\f2\fs32 \cb5 \'a0function. This means our first line would now look like:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 num = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "Number: "\cf8 \strokec8 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls12\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Now, the program will work just as we intended!\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#sequences"}}{\fldrslt 
\b\fs36 \cf4 Sequences}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 One of the most powerful parts of the Python language is its ability to work with\'a0
\b sequences
\b0 \'a0of data in addition to individual variables.\
There are several types of sequences that are similar in some ways, but different in others. When explaining those differences, we\'92ll use the terms\'a0
\b mutable/immutable
\b0 \'a0and\'a0
\b ordered/unordered
\b0 .\'a0
\b Mutable
\b0 \'a0means that once a sequence has been defined, we can change individual elements of that sequence, and\'a0
\b ordered
\b0 \'a0means that the order of the objects matters.\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#strings"}}{\fldrslt 
\b\fs30 \cf4 Strings}}
\b\fs30 \
\pard\pardeftab720\sl400\partightenfactor0

\fs32 \cf4 :\'a0Ordered: Yes\cb1 \
\cb5 Mutable
\b0 : No\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 We\'92ve already looked at strings a little bit, but instead of just variables, we can think of a string as a sequence of characters. This means we can access individual elements within the string! For example:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 name = \cf9 \strokec9 "Harry"\cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (name[0])\
\cf6 \strokec6 print\cf8 \strokec8 (name[1])\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 prints out the first (or index-0) character in the string, which in this case happens to be\'a0
\f3\fs28 \cb10 H
\f2\fs32 \cb5 , and then prints out the second (or index-1) character, which is\'a0
\f3\fs28 \cb10 a
\f2\fs32 \cb5 .\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#lists"}}{\fldrslt 
\b\fs30 \cf4 Lists}}
\b\fs30 \
\pard\pardeftab720\sl400\partightenfactor0

\fs32 \cf4 :\'a0Ordered: Yes\cb1 \
\cb5 Mutable
\b0 : Yes\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb5 A\'a0{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_lists.asp"}}{\fldrslt \cf11 \strokec11 Python list}}\'a0allows you to store any variable types. We create a list using square brackets and commas, as shown below. Similarly to strings, we can print an entire list, or some individual elements. We can also add elements to a list using\'a0
\f3\fs28 \cb10 append
\f2\fs32 \cb5 , and sort a list using\'a0
\f3\fs28 \cb10 sort
\f2\fs32 \cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf13 \cb7 \strokec13 # This is a Python comment\'a0\cf8 \strokec8 names = [\cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "Ron"\cf8 \strokec8 , \cf9 \strokec9 "Hermione"\cf8 \strokec8 ]\
\cf13 \strokec13 # Print the entire list:\'a0\cf6 \strokec6 print\cf8 \strokec8 (names)\
\cf13 \strokec13 # Print the second element of the list:\'a0\cf6 \strokec6 print\cf8 \strokec8 (names[1])\
\cf13 \strokec13 # Add a new name to the list:\'a0\cf8 \strokec8 names.append(\cf9 \strokec9 "Draco"\cf8 \strokec8 )\
\cf13 \strokec13 # Sort the list:\'a0\cf8 \strokec8 names.sort()\
\cf13 \strokec13 # Print the new list:\'a0\cf6 \strokec6 print\cf8 \strokec8 (names)\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb1 \strokec4 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#tuples"}}{\fldrslt 
\b\fs30 \cf4 Tuples}}
\b\fs30 \
\pard\pardeftab720\sl400\partightenfactor0

\fs32 \cf4 :\'a0Ordered: Yes\cb1 \
\cb5 Mutable
\b0 : No\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_tuples.asp"}}{\fldrslt \cf11 \cb5 \strokec11 Tuples}}\cb5 \'a0are generally used when you need to store just two or three values together, such as the x and y values for a point. In Python code, we use parentheses:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 point = (12.5, 10.6)\
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#sets"}}{\fldrslt 
\b\fs30 \cf4 Sets}}
\b\fs30 \
\pard\pardeftab720\sl400\partightenfactor0

\fs32 \cf4 :\'a0Ordered: No\cb1 \
\cb5 Mutable
\b0 : N/A\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_sets.asp"}}{\fldrslt \cf11 \cb5 \strokec11 Sets}}\cb5 \'a0are different from lists and tuples in that they are\'a0
\b unordered
\b0 . They are also different because while you can have two or more of the same elements within a list/tuple, a set will only store each value once. We can define an empty set using the\'a0
\f3\fs28 \cb10 set
\f2\fs32 \cb5 \'a0function. We can then use\'a0
\f3\fs28 \cb10 add
\f2\fs32 \cb5 \'a0and\'a0
\f3\fs28 \cb10 remove
\f2\fs32 \cb5 \'a0to add and remove elements from that set, and the\'a0
\f3\fs28 \cb10 len
\f2\fs32 \cb5 \'a0function to find the set\'92s size. Note that the\'a0
\f3\fs28 \cb10 len
\f2\fs32 \cb5 \'a0function works on all sequences in python. Also note that despite adding\'a0
\f3\fs28 \cb10 4
\f2\fs32 \cb5 \'a0and\'a0
\f3\fs28 \cb10 3
\f2\fs32 \cb5 \'a0to the set twice, each item can only appear once in a set.\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf13 \cb7 \strokec13 # Create an empty set:\'a0\cf8 \strokec8 s = \cf12 \strokec12 set\cf8 \strokec8 ()\
\
\cf13 \strokec13 # Add some elements:\'a0\cf8 \strokec8 s.add(1)\
s.add(2)\
s.add(3)\
s.add(4)\
s.add(3)\
s.add(1)\
\
\cf13 \strokec13 # Remove 2 from the set\'a0\cf8 \strokec8 s.remove(2)\
\
\cf13 \strokec13 # Print the set:\'a0\cf6 \strokec6 print\cf8 \strokec8 (s)\
\
\cf13 \strokec13 # Find the size of the set:\'a0\cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"The set has\'a0\{\cf12 \strokec12 len\cf8 \strokec8 (s)\cf9 \strokec9 \}\'a0elements."\cf8 \strokec8 )\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ This is a python multi-line comment: Output: \{1, 3, 4\} The set has 3 elements. """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#dictionaries"}}{\fldrslt 
\b\fs30 \cf4 Dictionaries}}
\b\fs30 \
\pard\pardeftab720\sl400\partightenfactor0

\fs32 \cf4 :\'a0Ordered: No\cb1 \
\cb5 Mutable
\b0 : Yes\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_dictionaries.asp"}}{\fldrslt \cf11 \cb5 \strokec11 Python Dictionaries}}\cb5 \'a0or\'a0
\f3\fs28 \cb10 dict
\f2\fs32 \cb5 s, will be especially useful in this course. A dictionary is a set of\'a0
\b key-value pairs
\b0 , where each key has a corresponding value, just like in a dictionary, each word (the key) has a corresponding definition (the value). In Python, we use curly brackets to contain a dictionary, and colons to indicate keys and values. For example:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf13 \cb7 \strokec13 # Define a dictionary\'a0\cf8 \strokec8 houses = \{\cf9 \strokec9 "Harry"\cf8 \strokec8 : \cf9 \strokec9 "Gryffindor"\cf8 \strokec8 , \cf9 \strokec9 "Draco"\cf8 \strokec8 : \cf9 \strokec9 "Slytherin"\cf8 \strokec8 \}\
\cf13 \strokec13 # Print out Harry's house\'a0\cf6 \strokec6 print\cf8 \strokec8 (houses[\cf9 \strokec9 "Harry"\cf8 \strokec8 ])\
\cf13 \strokec13 # Adding values to a dictionary:\'a0\cf8 \strokec8 houses[\cf9 \strokec9 "Hermione"\cf8 \strokec8 ] = \cf9 \strokec9 "Gryffindor"\cf8 \strokec8 \
\cf13 \strokec13 # Print out Hermione's House:\'a0\cf6 \strokec6 print\cf8 \strokec8 (houses[\cf9 \strokec9 "Hermione"\cf8 \strokec8 ])\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: Gryffindor Gryffindor """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#loops"}}{\fldrslt 
\b\fs30 \cf4 Loops}}
\b\fs30 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 Loops are an incredibly important part of any programming language, and in Python, they come in two main forms:\'a0{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_for_loops.asp"}}{\fldrslt \cf11 \strokec11 for loops}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_while_loops.asp"}}{\fldrslt \cf11 \strokec11 while loops}}. For now, we\'92ll focus on For Loops.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls13\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 For loops are used to iterate over a sequence of elements, performing some block of code (indented below) for each element in a sequence. For example, the following code will print out the numbers from 0 to 5:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 for\cf8 \strokec8  i in [0, 1, 2, 3, 4, 5]:\
    \cf6 \strokec6 print\cf8 \strokec8 (i)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: 0 1 2 3 4 5 """\cf8 \strokec8 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls14\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 We can condense this code using the python\'a0
\f3\fs28 \cb10 range
\f2\fs32 \cb5 \'a0function, which allows us to easily get a sequence of numbers. The following code gives the exact same result as our code from above:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 for\cf8 \strokec8  i in \cf12 \strokec12 range\cf8 \strokec8 (6):\
    \cf6 \strokec6 print\cf8 \strokec8 (i)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: 0 1 2 3 4 5 """\cf8 \strokec8 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls15\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 This type of loop can work for any sequence! For example, if we wish to print each name in a list, we could write the code below:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf13 \cb7 \strokec13 # Create a list:\'a0\cf8 \strokec8 names = [\cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "Ron"\cf8 \strokec8 , \cf9 \strokec9 "Hermione"\cf8 \strokec8 ]\
\
\cf13 \strokec13 # Print each name:\'a0\cf6 \strokec6 for\cf8 \strokec8  name in names:\
    \cf6 \strokec6 print\cf8 \strokec8 (name)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: Harry Ron Hermione """\cf8 \strokec8 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls16\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 We can get even more specific if we want, and loop through each character in a single name!\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 name = \cf9 \strokec9 "Harry"\cf8 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 for\cf8 \strokec8  char in name:\
    \cf6 \strokec6 print\cf8 \strokec8 (char)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: H a r r y """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#functions"}}{\fldrslt 
\b\fs36 \cf4 Functions}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 We\'92ve already seen a few python functions such as\'a0
\f3\fs28 \cb10 print
\f2\fs32 \cb5 \'a0and\'a0
\f3\fs28 \cb10 input
\f2\fs32 \cb5 , but now we\'92re going to dive into writing our own functions. To get started, we\'92ll write a function that takes in a number and squares it:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 def\cf8 \strokec8  square(x):\
    \cf6 \strokec6 return\cf8 \strokec8  x * x\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Notice how we use the\'a0
\f3\fs28 \cb10 def
\f2\fs32 \cb5 \'a0keyword to indicate we\'92re defining a function, that we\'92re taking in a single input called\'a0
\f3\fs28 \cb10 x
\f2\fs32 \cb5 \'a0and that we use the\'a0
\f3\fs28 \cb10 return
\f2\fs32 \cb5 \'a0keyword to indicate what the function\'92s output should be.\
We can then \'93call\'94 this function just as we\'92ve called other ones: using parentheses:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 for\cf8 \strokec8  i in \cf12 \strokec12 range\cf8 \strokec8 (10):\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"The square of\'a0\{\cf8 \strokec8 i\cf9 \strokec9 \}\'a0is\'a0\{\cf8 \strokec8 square(i)\cf9 \strokec9 \}"\cf8 \strokec8 )\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: The square of 0 is 0 The square of 1 is 1 The square of 2 is 4 The square of 3 is 9 The square of 4 is 16 The square of 5 is 25 The square of 6 is 36 The square of 7 is 49 The square of 8 is 64 The square of 9 is 81 """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#modules"}}{\fldrslt 
\b\fs36 \cf4 Modules}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 As our projects get larger and larger, it will become useful to be able to write functions in one file and run them in another. In the case above, we could create create one file called\'a0
\f3\fs28 \cb10 functions.py
\f2\fs32 \cb5 \'a0with the code:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 def\cf8 \strokec8  square(x):\
    \cf6 \strokec6 return\cf8 \strokec8  x * x\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 And another file called\'a0
\f3\fs28 \cb10 square.py
\f2\fs32 \cb5 \'a0with the code:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 for\cf8 \strokec8  i in \cf12 \strokec12 range\cf8 \strokec8 (10):\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"The square of\'a0\{\cf8 \strokec8 i\cf9 \strokec9 \}\'a0is\'a0\{\cf8 \strokec8 square(i)\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 However, when we try to run\'a0
\f3\fs28 \cb10 square.py
\f2\fs32 \cb5 , we run into the following error:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
We run into this problem because by default, Python files don\'92t know about each other, so we have to explicitly\'a0
\f3\fs28 \cb10 import
\f2\fs32 \cb5 \'a0the square function from the\'a0
\f3\fs28 \cb10 functions
\f2\fs32 \cb5 \'a0
\b module
\b0 \'a0we just wrote. Now, when\'a0
\f3\fs28 \cb10 square.py
\f2\fs32 \cb5 \'a0looks like this:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 from\cf8 \strokec8  functions \cf6 \strokec6 import\cf8 \strokec8  square\
\
\cf6 \strokec6 for\cf8 \strokec8  i in \cf12 \strokec12 range\cf8 \strokec8 (10):\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"The square of\'a0\{\cf8 \strokec8 i\cf9 \strokec9 \}\'a0is\'a0\{\cf8 \strokec8 square(i)\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Alternatively, we can choose to import the entire\'a0
\f3\fs28 \cb10 functions
\f2\fs32 \cb5 \'a0module and then use dot notation to access the\'a0
\f3\fs28 \cb10 square
\f2\fs32 \cb5 \'a0function:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 import\cf8 \strokec8  functions\
\
\cf6 \strokec6 for\cf8 \strokec8  i in \cf12 \strokec12 range\cf8 \strokec8 (10):\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"The square of\'a0\{\cf8 \strokec8 i\cf9 \strokec9 \}\'a0is\'a0\{\cf8 \strokec8 functions.square(i)\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 There are many built-in Python modules we can import such as\'a0
\f3\fs28 \cb10 math
\f2\fs32 \cb5 \'a0or\'a0
\f3\fs28 \cb10 csv
\f2\fs32 \cb5 \'a0that give us access to even more functions. Additionally, we can download even more Modules to access even more functionality! We\'92ll spend a lot of time using the\'a0
\f3\fs28 \cb10 Django
\f2\fs32 \cb5 \'a0Module, which we\'92ll discuss in the next lecture.\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#object-oriented-programming"}}{\fldrslt 
\b\fs36 \cf4 Object-Oriented Programming}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt 
\b0\fs32 \cf11 \strokec11 Object Oriented Programming}}
\b0\fs32 \'a0is a programming paradigm, or a way of thinking about programming, that is centered around objects that can store information and perform actions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls17\ilvl0\cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 
\b \cb5 Classes
\b0 : We\'92ve already seen a few different types of variables in python, but what if we want to create our own type? A\'a0{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_classes.asp"}}{\fldrslt \cf11 \strokec11 Python Class}}\'a0is essentially a template for a new type of object that can store information and perform actions. Here\'92s a class that defines a two-dimensional point:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 class\cf8 \strokec8  Point():\
    \cf13 \strokec13 # A method defining how to create a point:\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  __init__(\cf12 \strokec12 self\cf8 \strokec8 , x, y):\
        \cf12 \strokec12 self\cf8 \strokec8 .x = x\
        \cf12 \strokec12 self\cf8 \strokec8 .y = y\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls18\ilvl0
\f2\fs32 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \cb5 Note that in the above code, we use the keyword\'a0
\f3\fs28 \cb10 self
\f2\fs32 \cb5 \'a0to represent the object we are currently working with.\'a0
\f3\fs28 \cb10 self
\f2\fs32 \cb5 \'a0should be the first argument for any method within a Python class.\cb1 \
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 Now, let\'92s see how we can actually use the class from above to create an object:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 p = Point(2, 8)\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (p.x)\
\cf6 \strokec6 print\cf8 \strokec8 (p.y)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: 2 8 """\cf8 \strokec8 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Now, let\'92s look at a more interesting example where instead of storing just the coordinates of a Point, we create a class that represents an airline flight:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 class\cf8 \strokec8  Flight():\
    \cf13 \strokec13 # Method to create new flight with given capacity\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  __init__(\cf12 \strokec12 self\cf8 \strokec8 , capacity):\
        \cf12 \strokec12 self\cf8 \strokec8 .capacity = capacity\
        \cf12 \strokec12 self\cf8 \strokec8 .passengers = []\
\
    \cf13 \strokec13 # Method to add a passenger to the flight:\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  add_passenger(\cf12 \strokec12 self\cf8 \strokec8 , name):\
        \cf12 \strokec12 self\cf8 \strokec8 .passengers.append(name)\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 However, this class is flawed because while we set a capacity, we could still add too many passengers. Let\'92s augment it so that before adding a passenger, we check to see if there is room on the flight:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 class\cf8 \strokec8  Flight():\
    \cf13 \strokec13 # Method to create new flight with given capacity\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  __init__(\cf12 \strokec12 self\cf8 \strokec8 , capacity):\
        \cf12 \strokec12 self\cf8 \strokec8 .capacity = capacity\
        \cf12 \strokec12 self\cf8 \strokec8 .passengers = []\
\
    \cf13 \strokec13 # Method to add a passenger to the flight:\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  add_passenger(\cf12 \strokec12 self\cf8 \strokec8 , name):\
        \cf6 \strokec6 if\cf8 \strokec8  not \cf12 \strokec12 self\cf8 \strokec8 .open_seats():\
            \cf6 \strokec6 return\cf8 \strokec8  \cf12 \strokec12 False\cf8 \strokec8 \
        \cf12 \strokec12 self\cf8 \strokec8 .passengers.append(name)\
        \cf6 \strokec6 return\cf8 \strokec8  \cf12 \strokec12 True\cf8 \strokec8 \
\
    \cf13 \strokec13 # Method to return number of open seats\'a0\cf8 \strokec8     \cf6 \strokec6 def\cf8 \strokec8  open_seats(\cf12 \strokec12 self\cf8 \strokec8 ):\
        \cf6 \strokec6 return\cf8 \strokec8  \cf12 \strokec12 self\cf8 \strokec8 .capacity - \cf12 \strokec12 len\cf8 \strokec8 (\cf12 \strokec12 self\cf8 \strokec8 .passengers)\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Note that above, we use the line\'a0
\f3\fs28 \cb10 if not self.open_seats()
\f2\fs32 \cb5 \'a0to determine whether or not there are open seats. This works because in Python, the number 0 can be interpretted as meaning\'a0
\f3\fs28 \cb10 False
\f2\fs32 \cb5 , and we can also use the keyword\'a0
\f3\fs28 \cb10 not
\f2\fs32 \cb5 \'a0to signify the opposite of the following statement so\'a0
\f3\fs28 \cb10 not True
\f2\fs32 \cb5 \'a0is\'a0
\f3\fs28 \cb10 False
\f2\fs32 \cb5 \'a0and\'a0
\f3\fs28 \cb10 not False
\f2\fs32 \cb5 \'a0is\'a0
\f3\fs28 \cb10 True
\f2\fs32 \cb5 . Therefore, if\'a0
\f3\fs28 \cb10 open_seats
\f2\fs32 \cb5 \'a0returns 0, the entire expression will evaluate to\'a0
\f3\fs28 \cb10 True
\f2\fs32 \cb5 \
Now, let\'92s try out the class we\'92ve created by instantiating some objects:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf13 \cb7 \strokec13 # Create a new flight with o=up to 3 passengers\'a0\cf8 \strokec8 flight = Flight(3)\
\
\cf13 \strokec13 # Create a list of people\'a0\cf8 \strokec8 people = [\cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "Ron"\cf8 \strokec8 , \cf9 \strokec9 "Hermione"\cf8 \strokec8 , \cf9 \strokec9 "Ginny"\cf8 \strokec8 ]\
\
\cf13 \strokec13 # Attempt to add each person in the list to a flight\'a0\cf6 \strokec6 for\cf8 \strokec8  person in people:\
    \cf6 \strokec6 if\cf8 \strokec8  flight.add_passenger(person):\
        \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"Added\'a0\{\cf8 \strokec8 person\cf9 \strokec9 \}\'a0to flight successfully"\cf8 \strokec8 )\
    \cf6 \strokec6 else\cf8 \strokec8 :\
        \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"No available seats for\'a0\{\cf8 \strokec8 person\cf9 \strokec9 \}"\cf8 \strokec8 )\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: Added Harry to flight successfully Added Ron to flight successfully Added Hermione to flight successfully No available seats for Ginny """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#functional-programming"}}{\fldrslt 
\b\fs36 \cf4 Functional Programming}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 In addition to supporting Object-Oriented Programming, Python also supports the\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Functional_programming"}}{\fldrslt \cf11 \strokec11 Functional Programming Paradigm}}, in which functions are treated as values just like any other variable.\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#decorators"}}{\fldrslt 
\b\fs30 \cf4 Decorators}}
\b\fs30 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 One thing made possible by functional programming is the idea of a decorator, which is a higher-order function that can modify another function. For example, let\'92s write a decorator that announces when a function is about to begin, and when it ends. We can then apply this decorator using an\'a0
\f3\fs28 \cb10 @
\f2\fs32 \cb5 \'a0symbol.\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 def\cf8 \strokec8  announce(f):\
    \cf6 \strokec6 def\cf8 \strokec8  wrapper():\
        \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "About to run the function"\cf8 \strokec8 )\
        f()\
        \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Done with the function"\cf8 \strokec8 )\
    \cf6 \strokec6 return\cf8 \strokec8  wrapper\
\
@announce\
\cf6 \strokec6 def\cf8 \strokec8  hello():\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Hello, world!"\cf8 \strokec8 )\
\
hello()\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: About to run the function Hello, world! Done with the function """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#lambda-functions"}}{\fldrslt 
\b\fs30 \cf4 Lambda Functions}}
\b\fs30 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 Lambda functions provide another way to create functions in python. For example, if we want to define the same\'a0
\f3\fs28 \cb10 square
\f2\fs32 \cb5 \'a0function we did earlier, we can write:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 square = \cf6 \strokec6 lambda\cf8 \strokec8  x: x * x\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 Where the input is to the left of the\'a0
\f3\fs28 \cb10 :
\f2\fs32 \cb5 \'a0and the output is on the right.\
This can be useful when we don\'92t want to write a whole separate function for a single, small use. For example, if we want to sort some objects where it\'92s not clear at first how to sort them. Imagine we have a list of people, but with names and houses instead of just names that we wish to sort:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 people = [\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Gryffindor"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Cho"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Ravenclaw"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Draco"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Slytherin"\cf8 \strokec8 \}\
]\
\
people.sort()\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (people)\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 This, however, leaves us with the error:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
Which occurs because Python doesn\'92t know how to compare two Dictionaries to check if one is less than the other.\
We can solve this problem by including a\'a0
\f3\fs28 \cb10 key
\f2\fs32 \cb5 \'a0argument to the sort function, which specifies which part of the dictionary we wish to use to sort:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 people = [\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Gryffindor"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Cho"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Ravenclaw"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Draco"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Slytherin"\cf8 \strokec8 \}\
]\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 def\cf8 \strokec8  f(person):\
    \cf6 \strokec6 return\cf8 \strokec8  person[\cf9 \strokec9 "name"\cf8 \strokec8 ]\
\
people.sort(key=f)\
\
\cf6 \strokec6 print\cf8 \strokec8 (people)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: [\{'name': 'Cho', 'house': 'Ravenclaw'\}, \{'name': 'Draco', 'house': 'Slytherin'\}, \{'name': 'Harry', 'house': 'Gryffindor'\}] """\cf8 \strokec8 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 While this does work, we\'92ve had to write an entire function that we\'92re only using once, we can make our code more readable by using a lambda function:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 people = [\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Harry"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Gryffindor"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Cho"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Ravenclaw"\cf8 \strokec8 \},\
    \{\cf9 \strokec9 "name"\cf8 \strokec8 : \cf9 \strokec9 "Draco"\cf8 \strokec8 , \cf9 \strokec9 "house"\cf8 \strokec8 : \cf9 \strokec9 "Slytherin"\cf8 \strokec8 \}\
]\
\
people.sort(key=\cf6 \strokec6 lambda\cf8 \strokec8  person: person[\cf9 \strokec9 "name"\cf8 \strokec8 ])\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (people)\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \strokec9 """ Output: [\{'name': 'Cho', 'house': 'Ravenclaw'\}, \{'name': 'Draco', 'house': 'Slytherin'\}, \{'name': 'Harry', 'house': 'Gryffindor'\}] """\cf8 \strokec8 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\sl420\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/web/2020/notes/2/#exceptions"}}{\fldrslt 
\b\fs36 \cf4 Exceptions}}
\b\fs36 \
\pard\pardeftab720\sl400\sa240\partightenfactor0

\b0\fs32 \cf4 During this lecture, we\'92ve run into a few different exceptions, so now we\'92ll look into some new ways of dealing with them.\
In the following chunk of code, we\'92ll take two integers from the user, and attempt to divide them:\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf8 \cb7 \strokec8 x = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "x: "\cf8 \strokec8 ))\
y = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "y: "\cf8 \strokec8 ))\
\
result = x / y\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"\{\cf8 \strokec8 x\cf9 \strokec9 \}\'a0/\'a0\{\cf8 \strokec8 y\cf9 \strokec9 \}\'a0=\'a0\{\cf8 \strokec8 result\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 In many cases, this program works well:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
However, we\'92ll run into problems when we attempt to divide by 0:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
We can deal with this messy error using\'a0{\field{\*\fldinst{HYPERLINK "https://www.w3schools.com/python/python_try_except.asp"}}{\fldrslt \cf11 \strokec11 Exception Handling}}. In the following block of code, we will\'a0
\f3\fs28 \cb10 try
\f2\fs32 \cb5 \'a0to divide the two numbers,\'a0
\f3\fs28 \cb10 except
\f2\fs32 \cb5 \'a0when we get a\'a0
\f3\fs28 \cb10 ZeroDivisionError
\f2\fs32 \cb5 :\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 import\cf8 \strokec8  sys\
\
x = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "x: "\cf8 \strokec8 ))\
y = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "y: "\cf8 \strokec8 ))\
\
\cf6 \strokec6 try\cf8 \strokec8 :\
    result = x / y\
\cf6 \strokec6 except\cf8 \strokec8  \cf12 \strokec12 ZeroDivisionError\cf8 \strokec8 :\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Error: Cannot divide by 0."\cf8 \strokec8 )\
    \cf13 \strokec13 # Exit the program\'a0\cf8 \strokec8     sys.\cf12 \strokec12 exit\cf8 \strokec8 (1)\
\
\cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"\{\cf8 \strokec8 x\cf9 \strokec9 \}\'a0/\'a0\{\cf8 \strokec8 y\cf9 \strokec9 \}\'a0=\'a0\{\cf8 \strokec8 result\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\sa240\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 In this case, when we try it again:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
However, we still run into an error when the user enters non-numbers for x and y:\
\pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb1 \pard\pardeftab720\sl400\sa240\partightenfactor0
\cf4 \cb5 \
We can solve this problem in a similar manner!\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs28 \cf6 \cb7 \strokec6 import\cf8 \strokec8  sys\
\
\cf6 \strokec6 try\cf8 \strokec8 :\
    x = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "x: "\cf8 \strokec8 ))\
    y = \cf12 \strokec12 int\cf8 \strokec8 (\cf12 \strokec12 input\cf8 \strokec8 (\cf9 \strokec9 "y: "\cf8 \strokec8 ))\
\cf6 \strokec6 except\cf8 \strokec8  \cf12 \strokec12 ValueError\cf8 \strokec8 :\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Error: Invalid input"\cf8 \strokec8 )\
    sys.\cf12 \strokec12 exit\cf8 \strokec8 (1)\
\
\cf6 \strokec6 try\cf8 \strokec8 :\
    result = x / y\
\cf6 \strokec6 except\cf8 \strokec8  \cf12 \strokec12 ZeroDivisionError\cf8 \strokec8 :\
    \cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 "Error: Cannot divide by 0."\cf8 \strokec8 )\
    \cf13 \strokec13 # Exit the program\'a0\cf8 \strokec8     sys.\cf12 \strokec12 exit\cf8 \strokec8 (1)\
\
\cf6 \strokec6 print\cf8 \strokec8 (\cf9 \strokec9 f"\{\cf8 \strokec8 x\cf9 \strokec9 \}\'a0/\'a0\{\cf8 \strokec8 y\cf9 \strokec9 \}\'a0=\'a0\{\cf8 \strokec8 result\cf9 \strokec9 \}"\cf8 \strokec8 )\
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs32 \cf4 \cb5 \strokec4 That\'92s all for this lecture! Next time, we\'92ll use Python\'92s\'a0
\f3\fs28 \cb10 Django
\f2\fs32 \cb5 \'a0Module to build some applications!\
}